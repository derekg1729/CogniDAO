services:
  # Dolt SQL Server Database Service
  dolt-db:
    image: ${DOLT_IMAGE:-deploy-dolt-db}
    build:
      context: ..
      dockerfile: services/dolt_memory/cogni-cogni-dao-memory.dockerfile
    env_file: ./.env
    environment:
      - HOST=0.0.0.0
      - PORT=3306
      - DOLT_ROOT_PATH=/.dolt
      - DATABASE_REMOTE=https://doltremoteapi.dolthub.com/cogni/cogni-dao-memory
      - DATABASE_NAME=cogni-dao-memory
      - DOLTHUB_USER=cogni
      - DOLTHUB_EMAIL=steward@cognidao.org
      - DATA_DIR=/dolthub-dbs/cogni/cogni-dao-memory
      - DOLT_ROOT_HOST=%
      - DOLT_ROOT_PASSWORD=${DOLT_ROOT_PASSWORD}
      - CREDS_KEY=g3ld8if3kr1kl5ajm6ptl1kii5hvgo1t6vka5ms02arv2
      - CREDS_VALUE=${DOLTHUB_JWK_CREDENTIAL}
    volumes:
      - dolt_data:/dolthub-dbs
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "dolt", "sql", "-q", "SELECT 1;"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - cogni-net

  # Web API Service  
  api:
    image: ${API_IMAGE:-cogni-api-local}
    build:
      context: ..
      dockerfile: services/web_api/Dockerfile.api
    env_file: ./.env
    environment:
      - DOLT_HOST=dolt-db
      - DOLT_PORT=3306
      - DOLT_USER=root
      - DOLT_PASSWORD=${DOLT_ROOT_PASSWORD}
      - DOLT_DATABASE=cogni-dao-memory
      - DOLT_REMOTE_URL=https://doltremoteapi.dolthub.com/cogni/cogni-dao-memory
      - DOLT_REMOTE_PASSWORD=${DOLTHUB_MCP_ACCESS_WRITE}
      # ToolHive API URL for MCP tool health checking
      - TOOLHIVE_API=http://toolhive:8080
    ports: ["8000:8000"]  # Direct access for deploy script compatibility
    depends_on:
      dolt-db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      retries: 3
    networks:
      - cogni-net

  caddy:
    image: caddy:2-alpine
    ports: ["80:80", "443:443"]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on: [api]
    networks:
      - cogni-net

  # Prefect Server with SQLite
  prefect-server:
    image: prefecthq/prefect:3-python3.12
    command: prefect server start --host 0.0.0.0
    environment:
      - PREFECT_UI_URL=http://localhost:4200
      - PREFECT_API_URL=http://localhost:4200/api
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_SERVER_API_PORT=4200
    ports:
      - "4200:4200"  # Direct access like you're used to
    volumes:
      - prefect_data:/root/.prefect  # Persist SQLite database
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:4200/api/health')"]
      interval: 30s
      retries: 3
    networks:
      - cogni-net

  # Prefect Worker - connects to containerized Prefect server
  prefect-worker:
    image: prefecthq/prefect:3-python3.12
    command: prefect worker start --pool cogni-pool
    environment:
      - PREFECT_API_URL=http://prefect-server:4200/api
      # ToolHive API URL for MCP tool access
      - TOOLHIVE_API=http://toolhive:8080
    depends_on:
      prefect-server:
        condition: service_healthy
    volumes:
      - ../:/workspace  # Mount the entire project for flow access
    working_dir: /workspace
    restart: unless-stopped
    networks:
      - cogni-net

  # ToolHive - MCP container orchestrator  
  toolhive:
    image: ghcr.io/stacklok/toolhive:latest
    container_name: toolhive
    command: ["serve", "--host", "0.0.0.0", "--port", "8080"]  # Bind to all interfaces
    user: "0:0"  # Run as root for Docker socket access on macOS
    networks:
      - cogni-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    environment:
      - DOCKER_NETWORK=cogni-net
      - THV_SECRETS_BACKEND=1password
    ports:
      - "8080:8080"  # Use ToolHive's default port 8080
    restart: unless-stopped



volumes:
  caddy_data:
  caddy_config:
  dolt_data:
  prefect_data:
  mcp_chroma:

networks:
  cogni-net:
    driver: bridge 