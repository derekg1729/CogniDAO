{
    "name": "CoreAgent Base Class and LangChain Adapter MVP",
    "type": "Project",
    "status": "planning",
    "epic": "Cogni_Memory_System",
    "overview": "Define and implement the CoreAgent abstract base class, designed for StructuredMemoryBank and integrating essential components like a model handler and tools. Develop the LangChain adapter for framework integration. This MVP establishes the foundational agent structure.",
    "design_reference": {
        "base_class": "CoreAgent",
        "fields": [
            "id",
            "name",
            "memory: StructuredMemoryBank",
            "model_handler: BaseModelHandler",
            "tools: List[CogniTool]",
            "metadata: AgentMetadata"
        ],
        "methods": [
            "boot_routine()",
            "act(input: str) -> str",
            "record_action(input, output, metadata)",
            "load_context_blocks(tags)",
            "observe(input)",
            "get_tool(tool_name)",
            "handoff_routine()"
        ],
        "adapters": [
            "CrewCogniAdapter",
            "AutoGenCogniAdapter",
            "LangChainCogniAdapter",
            "A2ACogniAdapter"
        ]
    },
    "principles": [
        "CoreAgent remains framework-agnostic.",
        "Adapters wrap CoreAgent for framework compatibility.",
        "Memory interactions use StructuredMemoryBank.",
        "Leverage BaseModelHandler for LLM interactions.",
        "Utilize standardized CogniTool interface."
    ],
    "migration_strategy": [
        "Keep CogniAgent for legacy file-logging agents",
        "Create CoreAgent (structured, semantic)",
        "Use mixins or utilities for optional Markdown formatting, spirit-guide parsing, etc.",
        "Gradually migrate agents (e.g. GitCogni, CoreCogni) to CoreAgent + adapters"
    ],
    "implementation_flow_mvp": [
        {
            "step": "Phase 1: Define CoreAgent Base",
            "tasks": [
                "Create/Update legacy_logseq/cogni_agents/core_base.py (or similar)",
                "Define abstract class CoreAgent(ABC)",
                "Implement __init__(id, name, memory: StructuredMemoryBank, model_handler: BaseModelHandler, tools: List[CogniTool], metadata: AgentMetadata)",
                "Define abstract method: act(input: str) -> str",
                "Define placeholder method: boot_routine()",
                "Define placeholder method: observe(input)",
                "Define placeholder method: get_tool(tool_name)",
                "Define placeholder method: handoff_routine()",
                "Implement basic load_context_blocks(tags) using StructuredMemoryBank query",
                "Implement basic record_action(input, output, metadata) using StructuredMemoryBank (e.g., via CreateMemoryBlockTool)"
            ],
            "status": "todo"
        },
        {
            "step": "Phase 2: Define/Locate Supporting Components",
            "tasks": [
                "Define or locate BaseModelHandler interface/implementation",
                "Define or locate CogniTool interface/base class",
                "Define or locate AgentMetadata Pydantic model"
            ],
            "status": "todo",
            "notes": "These might already exist or need definition based on other project work."
        },
        {
            "step": "Phase 3: Create LangChain Adapter",
            "tasks": [
                "Create legacy_logseq/cogni_agents/adapters/langchain_adapter.py",
                "Define class LangChainCogniAdapter implementing LangChain Runnable",
                "Adapter's __init__ takes a CoreAgent instance",
                "Implement invoke/stream to call agent's act, observe, get_tool as needed",
                "Ensure interaction context is logged via agent's record_action or adapter logic"
            ],
            "status": "todo"
        },
        {
            "step": "Phase 4: Basic Testing",
            "tasks": [
                "Create legacy_logseq/cogni_agents/tests/test_core_base.py",
                "Unit test CoreAgent initialization (mocking dependencies like memory, handler, tools)",
                "Unit test CoreAgent context loading and action recording (mocking bank)",
                "Create legacy_logseq/cogni_agents/adapters/tests/test_langchain_adapter.py",
                "Unit test LangChainCogniAdapter wrapping a mock CoreAgent"
            ],
            "status": "todo"
        }
    ],
    "success_criteria_mvp": [
        "CoreAgent abstract class exists with specified methods and initialization signature.",
        "Placeholders or definitions exist for BaseModelHandler, CogniTool, AgentMetadata.",
        "LangChainCogniAdapter class exists and wraps CoreAgent.",
        "Unit tests for CoreAgent basics and LangChain adapter pass."
    ],
    "future_steps": [
        "Implement concrete logic for placeholder methods in CoreAgent.",
        "Refactor existing agents to inherit from CoreAgent.",
        "Integrate CoreAgent + LangChain adapter into flows.",
        "Develop adapters for other frameworks (AutoGen, CrewAI, A2A).",
        "Deprecate legacy agent base class."
    ]
}