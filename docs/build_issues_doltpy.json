{
    "issue_summary": "doltpy Dependency Chain Requires Compilation in Docker",
    "date_discovered": "2025-07-03",
    "context": "Attempting to implement ultra-lean multi-stage Dockerfile for web_api service",
    "problem_description": {
        "goal": "Create minimal Docker image with no build tools, using only pre-built wheels",
        "failure_point": "doltpy dependency chain requires packages that must be compiled from source",
        "specific_packages_requiring_compilation": [
            "cx-oracle==8.3.0",
            "sqlalchemy==1.3.18",
            "doltpy==2.0.4"
        ]
    },
    "dependency_chain": {
        "root_cause": "cogni-web-api → cogni-infra-core → doltpy → cx-oracle + sqlalchemy==1.3.18",
        "compilation_requirements": [
            "gcc compiler",
            "Oracle client libraries for cx-oracle",
            "Build tools for sqlalchemy 1.3.18 (no wheels available)"
        ]
    },
    "attempted_solutions": {
        "only_binary_flag": {
            "command": "uv pip install --system --only-binary :all: .",
            "result": "Failed - no wheels available for doltpy, cx-oracle, sqlalchemy==1.3.18",
            "error": "Wheels are required for `doltpy` because building from source is disabled"
        },
        "lean_dockerfile_approach": {
            "target_image_size": "~130MB",
            "design_principles": [
                "No build dependencies in final image",
                "Multi-stage build: builder installs deps, runtime copies wheels only",
                "System-wide package install (no virtual environments)"
            ],
            "blocker": "Cannot avoid compilation without removing doltpy entirely"
        }
    },
    "working_solution": {
        "approach": "Complex multi-stage build with build tools in builder stage",
        "trade_offs": [
            "Larger builder stage (includes gcc, g++, libaio-dev, curl)",
            "Virtual environment approach instead of system-wide",
            "More complex Dockerfile (53 lines vs target ~15 lines)"
        ],
        "status": "Fully functional - API starts successfully, infra_core imports work"
    },
    "potential_future_solutions": {
        "replace_doltpy": {
            "description": "Use direct MySQL connector instead of doltpy in container environments",
            "impact": "Would require refactoring infra_core memory system",
            "benefit": "Enable true lean Docker builds"
        },
        "pre_built_wheels": {
            "description": "Create custom wheels for doltpy + dependencies",
            "complexity": "High - requires maintaining build infrastructure",
            "benefit": "Preserve lean design while keeping doltpy"
        },
        "different_base_image": {
            "description": "Use python:3.12 instead of python:3.12-slim",
            "trade_off": "Larger base image but includes build tools",
            "alignment": "Violates lean design principles"
        }
    },
    "recommendation": {
        "short_term": "Accept current working complex Dockerfile - functionality over form",
        "long_term": "Investigate replacing doltpy with direct MySQL connection in containers",
        "reasoning": "Build reliability and functionality are more important than Dockerfile elegance"
    },
    "lessons_learned": [
        "Ultra-lean designs can conflict with real-world dependency constraints",
        "Package compilation requirements propagate through dependency chains",
        "uv workspace support requires specific version and syntax combinations",
        "Pre-built wheel availability varies significantly across the Python ecosystem"
    ]
}