{
  "type": "Project",
  "status": "planning",
  "epic": "[[Epic_Presence_and_Control_Loops]]",
  "name": "CogniMemorySystem-POC",
  "description": "Proof-of-concept for a composable memory and agent system integrating Dolt for versioned storage, LlamaIndex for semantic and graph indexing, LangChain for orchestration, and Pydantic for schema validation. This project will be developed in the /experiments folder.",
  "schemas": {
    "memory_block_json": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "MemoryBlock",
      "type": "object",
      "required": ["id", "type", "text"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Globally unique ID for this memory block"
        },
        "type": {
          "type": "string",
          "enum": ["knowledge", "task", "project", "doc"],
          "description": "Block type used to determine metadata structure and relationships"
        },
        "text": {
          "type": "string",
          "description": "Primary content or description of the block"
        },
        "tags": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Optional tags for filtering, theming, or metadata"
        },
        "metadata": {
          "type": "object",
          "description": "Custom metadata based on block type (e.g. deadline for tasks, usage_steps for docs)",
          "additionalProperties": true
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["to_id", "relation"],
            "properties": {
              "to_id": {
                "type": "string",
                "description": "ID of the linked block"
              },
              "relation": {
                "type": "string",
                "description": "Type of relationship (e.g., 'subtask_of', 'depends_on', 'related_to')"
              }
            }
          },
          "description": "Directed edges connecting this block to others"
        },
        "source_file": {
          "type": ["string", "null"],
          "description": "Optional source markdown or file name"
        },
        "source_uri": {
          "type": ["string", "null"],
          "description": "Optional source link or Logseq block URI"
        },
        "confidence": {
          "type": "object",
          "properties": {
            "human": {
              "type": ["number", "null"],
              "minimum": 0,
              "maximum": 1,
              "description": "Optional human approval confidence score"
            },
            "ai": {
              "type": ["number", "null"],
              "minimum": 0,
              "maximum": 1,
              "description": "Optional AI-generated confidence score"
            }
          },
          "description": "Confidence scores for this memory block"
        },
        "created_by": {
          "type": ["string", "null"],
          "description": "Optional identifier for who created the block (agent name or user ID)"
        },
        "created_at": {
          "type": ["string", "null"],
          "format": "date-time",
          "description": "ISO timestamp of block creation"
        },
        "updated_at": {
          "type": ["string", "null"],
          "format": "date-time",
          "description": "ISO timestamp of last update"
        }
      }
    },
    "memory_block_pydantic": """from typing import Optional, List, Literal, Dict, Any
from datetime import datetime
from pydantic import BaseModel, Field


class BlockLink(BaseModel):
    to_id: str
    relation: str


class ConfidenceScore(BaseModel):
    human: Optional[float] = None
    ai: Optional[float] = None


class MemoryBlock(BaseModel):
    id: str
    type: Literal["knowledge", "task", "project", "doc"]
    text: str
    tags: List[str] = Field(default_factory=list)
    metadata: Dict[str, Any] = Field(default_factory=dict)
    links: List[BlockLink] = Field(default_factory=list)
    source_file: Optional[str] = None
    source_uri: Optional[str] = None
    confidence: Optional[ConfidenceScore] = None
    created_by: Optional[str] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
""",
    "dolt_sql": """CREATE TABLE memory_blocks (
  id TEXT PRIMARY KEY,
  type TEXT NOT NULL CHECK (type IN ('knowledge', 'task', 'project', 'doc')),
  text TEXT NOT NULL,
  tags_json JSON,
  metadata_json JSON,
  confidence_json JSON,
  source_file TEXT,
  source_uri TEXT,
  created_by TEXT,
  created_at DATETIME,
  updated_at DATETIME
);

CREATE TABLE block_links (
  from_id TEXT NOT NULL,
  to_id TEXT NOT NULL,
  relation TEXT NOT NULL,
  PRIMARY KEY (from_id, to_id, relation),
  FOREIGN KEY (from_id) REFERENCES memory_blocks(id),
  FOREIGN KEY (to_id) REFERENCES memory_blocks(id)
);
"""
  },
  "implementation_flow": [
    {
      "phase": "üß± Core Schema + Local Persistence",
      "tasks": [
        "task-1.1-define-memoryblockbase-schema.json",
        "task-1.2-create-dolt-memory-blocks-table.json",
        "task-1.3-write-json-dolt-conversion.json",
        "task-1.4-create-dolt-block-links-table.json"
      ]
    },
    {
      "phase": "üß† Indexing + Retrieval (LlamaIndex)",
      "tasks": [
        "task-2.1-install-llamaindex-create-vector-index.json",
        "task-2.2-build-memory-block-to-node-function.json",
        "task-2.3-create-basic-retrieval-function.json",
        "task-2.4-extend-node-conversion-for-type-links.json",
        "task-2.5-build-composablegraphindex.json"
      ]
    },
    {
      "phase": "‚öôÔ∏è Agent + Tool Wiring",
      "tasks": [
        "task-3.1-setup-basic-langchain-agent.json",
        "task-3.2-add-querymemoryblocks-tool.json",
        "task-3.3-add-creatememoryblock-tool.json"
      ]
    },
    {
      "phase": "üåê Frontend + API Hookup",
      "tasks": [
        "task-4.1-create-api-chat-endpoint.json",
        "task-4.2-build-basic-frontend-chatbox.json",
        "task-4.3-hook-up-agent-response-retrieved-memory.json"
      ]
    },
    {
      "phase": "üîÅ Sync + Persistence",
      "tasks": [
        "task-5.1-write-memoryblocks-to-dolt.json",
        "task-5.2-trigger-reindexing-after-dolt-updates.json"
      ]
    },
    {
      "phase": "üß™ Optional Debugging + Inspection",
      "tasks": [
        "task-6.1-add-endpoint-list-memory-blocks.json",
        "task-6.2-add-ui-viewer-graph-memory-list.json",
        "task-6.3-build-api-graph-endpoint.json",
        "task-6.4-create-minimal-graph-viewer-cytoscape.json"
      ]
    }
  ],
  "success_criteria": [
    "Demonstrate storing MemoryBlocks in a local Dolt database with versioning.",
    "Demonstrate indexing MemoryBlocks (including types and links) into LlamaIndex (Vector + Graph).",
    "Demonstrate querying memory semantically and via graph traversal using a LangChain agent.",
    "Demonstrate basic agent ability to create/update memory blocks, reflected in Dolt and LlamaIndex.",
    "Show interaction via a minimal frontend chat interface connected to a FastAPI endpoint."
  ],
  "references": {
    "architecture_overview": "Provided JSON describing the full CogniMemorySystem",
    "interaction_flow": "Provided JSON detailing the MVP user interaction sequence",
    "mvp_roadmap": "Provided JSON outlining the initial task breakdown",
    "mvp_roadmap_updates": "Provided JSON with adjustments and additions to the roadmap"
  }
} 