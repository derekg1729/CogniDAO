{
  "type": "Project",
  "status": "planning",
  "epic": "[[Epic_Presence_and_Control_Loops]]",
  "name": "CogniMemorySystem-POC",
  "description": "Proof-of-concept for a composable memory and agent system integrating Dolt for versioned storage, LlamaIndex for semantic and graph indexing, LangChain for orchestration, and Pydantic for schema validation. This project will be developed in the /experiments folder.",
  "design_decisions": {
    "dolt_llamaindex_sync": "Writes to Dolt will trigger immediate, synchronous updates to the corresponding LlamaIndex Node(s) to maintain consistency.",
    "graph_representation": "The MemoryBlock-to-Node converter will explicitly create edges in LlamaIndex based on the 'links' array, enabling graph traversal queries.",
    "agent_vs_persistent_memory": "Agent conversational memory (LangChain default) is distinct from persistent MemoryBlocks. Persistence requires explicit use of the 'CreateMemoryBlock' tool.",
    "create_memory_block_tool": "The tool requires core content fields (text, type) as input; it handles generating IDs, timestamps, and adding creator info.",
    "querying_json_fields": "Rely on LlamaIndex metadata filtering. Key values from JSON fields (tags, specific metadata, confidence) will be extracted and added to Node metadata during indexing.",
    "block_proofs_dao": "The Dolt commit hash serves as the proof of state. A 'block_proofs' table will map block updates to commit hashes for traceability and mock DAO submission.",
    "llamaindex_backend": "LlamaIndex will use ChromaDB as its vector store backend for semantic indexing and retrieval of MemoryBlocks."
  },
  "schemas": {
    "memory_block_json": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "MemoryBlock",
      "type": "object",
      "required": ["id", "type", "text"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Globally unique ID for this memory block"
        },
        "type": {
          "type": "string",
          "enum": ["knowledge", "task", "project", "doc"],
          "description": "Block type used to determine metadata structure and relationships"
        },
        "text": {
          "type": "string",
          "description": "Primary content or description of the block"
        },
        "tags": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Optional tags for filtering, theming, or metadata"
        },
        "metadata": {
          "type": "object",
          "description": "Custom metadata based on block type (e.g. deadline for tasks, usage_steps for docs)",
          "additionalProperties": true
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["to_id", "relation"],
            "properties": {
              "to_id": {
                "type": "string",
                "description": "ID of the linked block"
              },
              "relation": {
                "type": "string",
                "enum": ["related_to", "subtask_of", "depends_on", "child_of", "mentions"],
                "description": "Canonical type of relationship"
              }
            }
          },
          "description": "Directed outgoing edges connecting this block to others"
        },
        "source_file": {
          "type": ["string", "null"],
          "description": "Optional source markdown or file name"
        },
        "source_uri": {
          "type": ["string", "null"],
          "description": "Optional source link or Logseq block URI"
        },
        "confidence": {
          "type": "object",
          "properties": {
            "human": {
              "type": ["number", "null"],
              "minimum": 0,
              "maximum": 1,
              "description": "Optional human approval confidence score"
            },
            "ai": {
              "type": ["number", "null"],
              "minimum": 0,
              "maximum": 1,
              "description": "Optional AI-generated confidence score"
            }
          },
          "description": "Confidence scores for this memory block"
        },
        "created_by": {
          "type": ["string", "null"],
          "description": "Optional identifier for who created the block (agent name or user ID)"
        },
        "created_at": {
          "type": ["string", "null"],
          "format": "date-time",
          "description": "ISO timestamp of block creation"
        },
        "updated_at": {
          "type": ["string", "null"],
          "format": "date-time",
          "description": "ISO timestamp of last update"
        }
      }
    },
    "block_link_json": {
      "title": "BlockLink",
      "type": "object",
      "required": ["from_id", "to_id", "relation"],
      "properties": {
        "from_id": { "type": "string", "description": "ID of the source block" },
        "to_id": { "type": "string", "description": "ID of the target block" },
        "relation": {
          "type": "string",
          "enum": ["related_to", "subtask_of", "depends_on", "child_of", "mentions"],
          "description": "Canonical type of relationship"
         }
      }
    },
    "memory_block_pydantic": "from typing import Optional, List, Literal, Dict, Any\nfrom datetime import datetime\nfrom pydantic import BaseModel, Field\n\n# Canonical relation types defined\nRelationType = Literal[\"related_to\", \"subtask_of\", \"depends_on\", \"child_of\", \"mentions\"]\n\nclass BlockLink(BaseModel):\n    to_id: str\n    relation: RelationType # Use canonical types\n\n\nclass ConfidenceScore(BaseModel):\n    human: Optional[float] = None\n    ai: Optional[float] = None\n\n\nclass MemoryBlock(BaseModel):\n    id: str\n    type: Literal[\"knowledge\", \"task\", \"project\", \"doc\"]\n    text: str\n    tags: List[str] = Field(default_factory=list)\n    metadata: Dict[str, Any] = Field(default_factory=dict)\n    links: List[BlockLink] = Field(default_factory=list)\n    source_file: Optional[str] = None\n    source_uri: Optional[str] = None\n    confidence: Optional[ConfidenceScore] = None\n    created_by: Optional[str] = None\n    created_at: Optional[datetime] = None\n    updated_at: Optional[datetime] = None\n",
    "block_link_pydantic": "from pydantic import BaseModel\nfrom typing import Literal\n\n# Canonical relation types defined\nRelationType = Literal[\"related_to\", \"subtask_of\", \"depends_on\", \"child_of\", \"mentions\"]\n\nclass BlockLink(BaseModel):\n    from_id: str\n    to_id: str\n    relation: RelationType # Use canonical types",
    "dolt_sql": "CREATE TABLE memory_blocks (\n  id TEXT PRIMARY KEY,\n  type TEXT NOT NULL CHECK (type IN ('knowledge', 'task', 'project', 'doc')),\n  text TEXT NOT NULL,\n  tags_json JSON,\n  metadata_json JSON,\n  confidence_json JSON,\n  source_file TEXT,\n  source_uri TEXT,\n  created_by TEXT,\n  created_at DATETIME,\n  updated_at DATETIME\n);\n\nCREATE TABLE block_links (\n  from_id TEXT NOT NULL,\n  to_id TEXT NOT NULL,\n  relation TEXT NOT NULL, -- Should use canonical types: related_to, subtask_of, depends_on, child_of, mentions\n  PRIMARY KEY (from_id, to_id, relation),\n  FOREIGN KEY (from_id) REFERENCES memory_blocks(id) ON DELETE CASCADE,\n  FOREIGN KEY (to_id) REFERENCES memory_blocks(id) ON DELETE CASCADE\n);\n",
    "llamaindex_config": {
      "embedding_backend": "ChromaDB",
      "embedding_model": "OpenAIEmbedding('text-embedding-3-small')",
      "storage_path": "./storage/chroma",
      "llamaindex_node_class": "SimpleNode"
    }
  },
  "implementation_flow": [
    {
      "phase": "üß± Phase 1: Schema + Rapid Indexing Loop",
      "tasks": [
        "task-1.1-define-memoryblockbase-schema.json",
        "task-1.2-create-dolt-memory-blocks-table.json",
        "task-1.3-write-json-dolt-conversion.json",
        "task-1.5-install-llamaindex.json",
        "task-1.6-install-chromadb-and-init-store.json",
        "task-1.7-basic-index-test-with-manual-block.json",
        "task-1.4-create-dolt-block-links-table.json"
      ]
    },
    {
      "phase": "üß† Phase 2: Full Indexing System",
      "tasks": [
        "task-2.1-build-memory-block-to-node-function.json",
        "task-2.2-create-basic-retrieval-function.json",
        "task-2.3-extend-node-conversion-for-type-links.json",
        "task-2.4-build-composablegraphindex.json",
        "task-2.5-implement-reverse-link-query.json"
      ]
    },
    {
      "phase": "‚öôÔ∏è Phase 3: Agent + Tool Wiring",
      "tasks": [
        "task-3.1-setup-basic-langchain-agent.json",
        "task-3.2-add-querymemoryblocks-tool.json",
        "task-3.3-add-creatememoryblock-tool.json"
      ]
    },
    {
      "phase": "üåê Phase 4: Frontend + API Hookup",
      "tasks": [
        "task-4.1-create-api-chat-endpoint.json",
        "task-4.2-build-basic-frontend-chatbox.json",
        "task-4.3-hook-up-agent-response-retrieved-memory.json"
      ]
    },
    {
      "phase": "üîÅ Phase 5: Sync + Persistence",
      "tasks": [
        "task-5.1-write-memoryblocks-to-dolt.json",
        "task-5.2-trigger-reindexing-after-dolt-updates.json"
      ]
    },
    {
      "phase": "üß™ Phase 6: Optional Debugging + Inspection",
      "tasks": [
        "task-6.1-add-endpoint-list-memory-blocks.json",
        "task-6.2-add-ui-viewer-graph-memory-list.json",
        "task-6.3-build-api-graph-endpoint.json",
        "task-6.4-create-minimal-graph-viewer-cytoscape.json",
        "task-6.5-build-memory-sync-validator.json"
      ]
    },
    {
      "phase": "üõ°Ô∏è Phase 7: Decentralized Hashing + DAO Integration (Early POC)",
      "tasks": [
        "task-7.1-fetch-dolt-hash-on-write.json",
        "task-7.2-store-block-proofs.json",
        "task-7.3-mock-dao-submitmemoryupdate.json",
        "task-7.4-optional-submit-zkvm-hash.json"
      ]
    }
  ],
  "success_criteria": {
    "phase_1_schema_and_rapid_indexing_loop": [
      "Demonstrate storing a MemoryBlock in Dolt.",
      "Demonstrate storing a basic link in the Dolt block_links table.",
      "Verify MemoryBlock JSON schema validation works.",
      "Successfully initialize ChromaDB as the vector store backend and confirm storage + retrieval of basic test embeddings via LlamaIndex."
    ],
    "phase_2_full_indexing_system": [
      "Demonstrate automated indexing of MemoryBlocks (including types and canonical links) from Dolt into LlamaIndex using both VectorStore and ComposableGraphIndex.",
      "Verify accurate retrieval of linked nodes (e.g., subtasks of a project) using LlamaIndex graph traversal.",
      "Demonstrate retrieving blocks linking *to* a specific block ID (reverse link/backlink query)."
    ],
    "phase_3_agent_tools": [
      "Demonstrate LangChain agent querying memory semantically and returning MemoryBlocks via tools.",
      "Demonstrate LangChain agent creating or updating a MemoryBlock via tools, reflected in Dolt and reindexed in LlamaIndex."
    ],
    "phase_4_frontend_and_api": [
      "Show interaction via a minimal frontend chat interface connected to a FastAPI endpoint.",
      "Display agent-generated messages and optionally retrieved memory in the frontend UI."
    ],
    "phase_5_commit_tracking_and_dao_ready": [
      "Demonstrate fetching `DOLT_HASHOF('main')` after every memory update.",
      "Store commit hashes associated with MemoryBlock updates in a new `block_proofs` table.",
      "Trace each memory update to a unique commit hash via logs or API.",
      "Simulate DAO-style memory proposal submission with commit hash and MemoryBlock metadata."
    ],
    "phase_6_optional_debugging_and_inspection": [
        "Demonstrate listing memory blocks via API endpoint.",
        "Demonstrate basic graph visualization of blocks and links.",
        "Verify the memory sync validator tool can detect inconsistencies between Dolt and LlamaIndex state (e.g., missing index updates, schema mismatches)."
    ]
  },
  "references": {
    "architecture_overview": "Provided JSON describing the full CogniMemorySystem",
    "interaction_flow": "Provided JSON detailing the MVP user interaction sequence",
    "mvp_roadmap": "Provided JSON outlining the initial task breakdown",
    "mvp_roadmap_updates": "Provided JSON with adjustments and additions to the roadmap"
  },
  "future_considerations": {
      "structured_content_blocks": "Future versions may migrate the 'text' field to a structured 'content_blocks' array to better represent headings, lists, code blocks, and nested content, improving semantic understanding and rendering.",
      "advanced_graph_analytics": "Explore deeper graph analytics capabilities beyond simple traversal, potentially integrating graph algorithms for community detection, centrality analysis, etc."
  }
} 