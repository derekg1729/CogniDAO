{
  "type": "Task",
  "status": "todo",
  "project": "../project-CogniMemorySystem-POC.json",
  "id": "2.2",
  "title": "Build memory_block_to_node() function",
  "phase": "ðŸ§  Indexing + Retrieval (LlamaIndex)",
  "goal": "Convert your Pydantic MemoryBlock object to a LlamaIndex `Node` object, including metadata.",
  "schema_references": [
    "project.schemas.memory_block_pydantic"
  ],
  "action_items": [
    "[ ] Define a Python function `memory_block_to_node(block: MemoryBlock) -> Node` (using Pydantic model from `project.schemas.memory_block_pydantic`).",
    "[ ] Import necessary LlamaIndex classes (e.g., `TextNode`).",
    "[ ] Create a `TextNode` instance.",
    "[ ] Set the `text` attribute of the Node to `block.text`.",
    "[ ] Set the `id_` attribute of the Node to `block.id`.",
    "[ ] Populate the `metadata` attribute of the Node with relevant fields from the `MemoryBlock` (e.g., `tags`, `source_file`, `source_uri`, `type`, `confidence`, potentially `links` structure as defined in Pydantic model).",
    "[ ] Ensure metadata values are suitable types for LlamaIndex filtering (e.g., lists of strings, numbers)."
  ],
  "test_criteria": [
    "Create a sample `MemoryBlock` instance.",
    "Call `memory_block_to_node()` with the sample block.",
    "Verify the returned object is a LlamaIndex `Node` (or subclass like `TextNode`).",
    "Verify the Node's `text`, `id_`, and `metadata` attributes match the input `MemoryBlock` data.",
    "Ensure the Node includes necessary information for embedding and indexing (text is present)."
  ],
  "current_status": "Not started."
} 