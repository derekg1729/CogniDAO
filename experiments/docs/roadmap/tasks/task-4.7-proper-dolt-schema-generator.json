{
  "type": "Task",
  "status": "in-progress",
  "project": "CogniMemorySystem-POC",
  "id": "4.7",
  "name": "Implement Dynamic Dolt Table Schema Generator from Pydantic Models",
  "description": "Replace the static SQL schema generation (generate_dolt_schema.py) with a dynamic generator that introspects Pydantic models (MemoryBlock, BlockLink) and outputs accurate Dolt CREATE TABLE statements.",
  "phase": "ðŸ§  Phase 4: Full Structured Memory + LlamaMemory Integration",
  "implementation_details": {
    "target_file": "experiments/scripts/generate_dolt_schema.py",
    "input_models": [
      "MemoryBlock (experiments/src/memory_system/schemas/memory_block.py)",
      "BlockLink (experiments/src/memory_system/schemas/block_link.py)"
    ],
    "requirements": [
      "Introspect fields, types, and required/optional status from Pydantic models.",
      "Auto-map Pydantic types to Dolt/MySQL compatible SQL types (e.g., str â†’ TEXT, datetime â†’ DATETIME, list/dict â†’ JSON).",
      "Correctly set NULL vs NOT NULL constraints based on field optionality.",
      "Support CHECK constraints for enum or literal types (e.g., relation field in BlockLink).",
      "Generate full CREATE TABLE statements dynamically without manual edits.",
      "Support future ALTER TABLE generation (optional enhancement)."
    ],
    "dependencies": [
      "MemoryBlock model enhancements from Phase 3",
      "BlockLink model enhancements from Phase 3",
      "Stabilization of LlamaMemory indexing structures"
    ],
    "optional_enhancements": [
      "Automatically detect schema drift against existing Dolt tables.",
      "Generate ALTER TABLE migration scripts if schema differences are found."
    ]
  },
  "action_items": [
    "[x] Create helper function to map basic Pydantic field types to SQL types.",
    "[x] Write generator to introspect MemoryBlock and BlockLink field metadata.",
    "[x] Output correct CREATE TABLE syntax for Dolt/MySQL.",
    "[x] Handle optional vs required fields (NULL/NOT NULL).",
    "[x] Handle enum/literal validation via SQL CHECK constraints if possible.",
    "[x] Generate new schema.sql file programmatically.",
    "[x] Validate generated schema file against current needs.",
    "[ ] Update documentation to reference dynamic schema generation.",
    "[ ] Archive old static generate_dolt_schema.py after successful replacement.",
    "[ ] Add support for complex nested types (e.g., ConfidenceScore).",
    "[ ] Improve nullability inference for Optional fields.",
    "[ ] Add type-specific warnings for fallback types.",
    "[ ] Add support for ALTER TABLE generation."
  ],
  "test_criteria": [
    "Generated CREATE TABLE statements accurately reflect current Pydantic model fields and types.",
    "All required fields are marked NOT NULL; optional fields allow NULL.",
    "Enum-like fields generate valid CHECK constraints.",
    "Generated schema.sql initializes memory_blocks, block_links correctly for new environments.",
    "Tests pass verifying mapping of Pydantic â†’ SQL types.",
    "No manual edits required in generated schema."
  ],
  "success_criteria": [
    "Dynamic Pydantic-to-SQL schema generation is fully functional.",
    "Schema generation automatically stays synchronized with evolving MemoryBlock/BlockLink models.",
    "Future changes to Pydantic models automatically flow into Dolt table definitions.",
    "Migration to dynamic schema generation completes without data loss.",
    "Project achieves fully programmatic schema lifecycle management."
  ],
  "current_status": "Core functionality implemented and working. Schema generation now handles basic types, enums, and constraints correctly. Next steps: 1) Improve handling of complex nested types, 2) Enhance nullability inference, 3) Add type-specific warnings, 4) Add ALTER TABLE support. Documentation updates pending."
}