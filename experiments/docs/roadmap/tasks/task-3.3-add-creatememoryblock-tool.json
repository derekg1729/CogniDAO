{
  "type": "Task",
  "status": "todo",
  "project": "CogniMemorySystem-POC",
  "name": "Add CreateMemoryBlock Tool",
  "description": "Create a LangChain tool that allows an agent to create new MemoryBlocks, persist them to Dolt, and trigger indexing. Includes type-specific validation and schema versioning.",
  "implementation_details": {
    "target_file": "experiments/src/memory_system/tools/create_block.py (or similar)",
    "schema_file": "experiments/src/memory_system/schemas/memory_block.py",
    "dolt_writer": "experiments/src/memory_system/dolt_writer.py",
    "indexer": "experiments/src/memory_system/llama_memory.py",
    "registry_table": "node_schemas"
  },
  "action_items": [
    "[ ] Define a LangChain `BaseTool` subclass (e.g., `CreateMemoryBlockTool`).",
    "[ ] Define the tool's input schema using Pydantic (likely a subset of `MemoryBlock` fields: `type`, `text`, `tags`, `metadata`, `source_file`, etc.). ID, timestamps, creator should be generated by the tool.",
    "[ ] Implement the tool's `_run` or `_arun` method:",
    "[ ]   Generate a unique ID (e.g., UUID) for the new block.",
    "[ ]   Set `created_at` and `updated_at` timestamps.",
    "[ ]   Potentially identify the `created_by` agent/user.",
    "[ ]   (Add) Define optional Pydantic sub-models for type-specific metadata (e.g., `ProjectMetadata`) in `memory_block.py` (if not already done).",
    "[ ]   (Add) Perform initial validation of input args against the base `MemoryBlock` fields required for creation.",
    "[ ]   (Add) Based on the input `type`, dynamically select the corresponding metadata sub-model.",
    "[ ]   (Add) If a sub-model exists, attempt to validate the input `metadata` against it. Handle `ValidationError` (e.g., return error message to agent).",
    "[ ]   (Add) Query the `node_schemas` table (via SQL or a helper function) for the latest `schema_version` for the input `type`.",
    "[ ]   (Add) Create the full `MemoryBlock` Pydantic object, populating the `schema_version` field.",
    "[ ]   Use the `DoltWriter` (from Task 1.3) to write the validated `MemoryBlock` object to the `memory_blocks` table in Dolt.",
    "[ ]   Handle potential database write errors.",
    "[ ]   (Sync) Trigger re-indexing: Convert the new `MemoryBlock` to a `Node` (using Task 2.1 function) and add it to the `LlamaMemory` index (Vector + Graph). This might involve calling methods on a `LlamaMemory` instance.",
    "[ ]   Return a success message to the agent, possibly including the new block's ID."
  ],
  "test_criteria": [
    "[ ] Unit/Integration tests pass for the `CreateMemoryBlockTool`.",
    "[ ] Test confirms the tool correctly generates ID and timestamps.",
    "[ ] (Add) Test confirms the tool validates against the base schema.",
    "[ ] (Add) Test confirms the tool attempts validation against type-specific metadata sub-models (if defined) and handles success/failure.",
    "[ ] (Add) Test confirms the tool correctly retrieves and sets the `schema_version` on the created `MemoryBlock`.",
    "[ ] Test confirms a new row is created in the Dolt `memory_blocks` table with the correct data.",
    "[ ] Test confirms the new block is successfully indexed in the LlamaIndex VectorStore (verifiable via Task 2.2 query function).",
    "[ ] Test confirms the new block is represented in the LlamaIndex GraphStore (verifiable by inspecting relationships or using Task 2.5 backlink query)."
  ],
  "success_criteria": [
    "[ ] A functioning LangChain tool exists that allows an agent to create a new MemoryBlock.",
    "[ ] The tool performs validation (including optional type-specific metadata validation).",
    "[ ] The tool correctly populates generated fields (ID, timestamps, creator, schema_version).",
    "[ ] The created block is successfully persisted in the Dolt `memory_blocks` table.",
    "[ ] The created block is successfully indexed for both semantic and graph-based retrieval."
  ],
  "current_status": "Task definition updated based on design feedback."
} 