{
    "type": "Task",
    "status": "in-progress",
    "project": "../project-CogniMemorySystem-POC.json",
    "id": "3.6",
    "title": "Enhance MemoryBlock and BlockLink Schemas for Production Use",
    "phase": "⚙️ Phase 3: Agent + Tool Wiring (Structured Memory)",
    "goal": "Enhance both MemoryBlock and BlockLink schemas to support production use cases with state management, visibility controls, versioning, and scalable graph traversal while maintaining backward compatibility.",
    "implementation_details": {
        "target_file": "experiments/src/memory_system/schemas/memory_block.py",
        "test_file": "experiments/src/memory_system/tests/test_memory_block.py",
        "dolt_table": "memory_blocks",
        "dependencies": [
            "task-2.8-define-schemas.json",
            "task-3.1-implement-structuredmemorybank.json",
            "task-4.5-implement-occ-retry-strategy.json"
        ]
    },
    "action_items": [
        "[x] Add new fields to MemoryBlock model:",
        "[x]   - state: Optional[Literal['draft', 'published', 'archived']]",
        "[x]   - visibility: Optional[Literal['internal', 'public', 'restricted']]",
        "[x]   - block_version: Optional[int]",
        "[x] Enhance existing fields:",
        "[x]   - Make embedding explicitly Optional[List[float]] with vector size enforcement",
        "[x]   - Add max_items=20 constraint to tags list",
        "[x] Add validation methods:",
        "[x]   - validate_state_transitions()",
        "[x]   - validate_visibility_changes()",
        "[x] Update CogniStructuredMemoryAdapter.save_context:",
        "[x]   - Initialize new MemoryBlocks with state='draft'",
        "[x]   - Initialize new MemoryBlocks with visibility='internal'",
        "[x]   - Initialize new MemoryBlocks with block_version=1",
        "[x] Implement schema generation automation:",
        "[x]   - Create script to generate Dolt schema from Pydantic models",
        "[x]   - Add support for custom type mappings",
        "[x]   - Add support for custom constraints",
        "[x]   - Add support for composite indexes",
        "[ ] Update Dolt schema:",
        "[ ]   - Run schema generation script to create updated schema.sql",
        "[ ]   - Add new columns: status, visibility, block_version",
        "[ ]   - Create composite index on (type, state, visibility)",
        "[ ] Update BlockLink model to support graph scaling:",
        "[ ]   - Add priority: Optional[int] (default 0)",
        "[ ]   - Add link_metadata: Optional[Dict[str, Any]]",
        "[ ]   - Add created_by: Optional[str]",
        "[ ]   - Add created_at: datetime (default now)",
        "[ ]   - Enforce canonical relation types with stricter validation",
        "[ ] Update Dolt schema for block_links:",
        "[ ]   - ALTER TABLE to add priority, link_metadata, created_by, created_at fields",
        "[ ]   - Create INDEX on to_id for reverse graph traversal optimizations",
        "[ ] Create migration script:",
        "[ ]   - Add new columns with default values",
        "[ ]   - Update existing blocks with appropriate state/visibility",
        "[ ]   - Migrate/update block_links to default priority 0, link_metadata as NULL",
        "[ ] Add validation logic for state/visibility transitions",
        "[ ] Update query patterns to use new indexes"
    ],
    "test_criteria": [
        "Unit tests for state transition validation pass",
        "Unit tests for visibility change validation pass",
        "Unit tests for BlockLink priority field default behavior",
        "Integration tests for visibility-based access control pass",
        "Integration tests for reverse traversal queries using to_id index",
        "Tests validating canonical relation types (e.g., only 'related_to', 'subtask_of', etc.)",
        "Performance tests for new composite index show improvement",
        "Migration tests verify existing blocks are updated correctly",
        "All existing functionality remains unchanged",
        "Tests verify MemoryBlock created via save_context has state=='draft'",
        "Tests verify MemoryBlock created via save_context has visibility=='internal'",
        "Tests verify MemoryBlock created via save_context has block_version==1",
        "Schema generation tests verify correct SQL output for all model fields",
        "Schema generation tests verify correct handling of custom type mappings",
        "Schema generation tests verify correct handling of custom constraints",
        "Schema generation tests verify correct handling of composite indexes"
    ],
    "success_criteria": [
        "All new fields are properly integrated into the MemoryBlock model",
        "Dolt schema updates are applied without data loss",
        "New indexes improve query performance for common patterns",
        "State transitions and visibility changes are properly validated",
        "BlockLink schema supports scalable forward and reverse traversal with minimal query overhead",
        "Relation types in block_links are fully validated against canonical list",
        "Graph traversal queries perform efficiently with large numbers of links",
        "Existing functionality remains unchanged",
        "All tests pass with new schema",
        "All MemoryBlocks saved via save_context have default state, visibility, and block_version populated correctly",
        "Tests verifying the default fields pass consistently",
        "Schema generation script produces correct SQL for all model fields",
        "Schema generation script handles custom type mappings correctly",
        "Schema generation script handles custom constraints correctly",
        "Schema generation script handles composite indexes correctly"
    ],
    "current_status": "In progress. Completed implementation of state, visibility, and block_version fields, along with field enhancements for embedding and tags. Successfully implemented and tested validation methods for state transitions, visibility changes, embedding size, and tags constraints. Successfully updated CogniStructuredMemoryAdapter.save_context to initialize new blocks with default values (state='draft', visibility='internal', block_version=1). Implemented schema generation automation with support for custom type mappings, constraints, and composite indexes. Next steps: 1) Run schema generation script to create updated schema.sql, 2) Update Dolt schema with new columns and indexes. Note: Task 4.5 (OCC Retry Strategy) should be completed before finalizing Dolt schema updates to ensure robust concurrent operations."
}