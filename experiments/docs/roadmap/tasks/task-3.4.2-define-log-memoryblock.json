{
    "type": "Instruction",
    "status": "todo",
    "id": "schema-logs-001",
    "name": "Create LogMetadata Schema",
    "goal": "Define and register a new Pydantic schema class for 'log' type MemoryBlocks, used to store atomic agent log entries linked to other blocks like tasks.",
    "target_file": "experiments/src/memory_system/schemas/metadata/log.py",
    "block_type": "log",
    "steps": [
      "Create a new Pydantic class `LogMetadata` in `log.py`",
      "Add the following fields with validation and descriptions:",
      {
        "timestamp": "datetime, required, timestamp of when the log was recorded",
        "agent": "str, required, name of the agent that generated the log",
        "tool": "str, optional, name of the tool invoked (if applicable)",
        "input": "str, optional, stringified input (if any) used by the tool or agent",
        "output": "str, optional, stringified output/result of the operation",
        "parent_block": "str, optional, ID of the parent MemoryBlock (usually a task or interaction)"
      },
      "Ensure all fields use `Field(..., description=...)` or `Field(default_factory=..., description=...)` as appropriate",
      "Use `model_config` to include at least one example log",
      "Call `register_metadata('log', LogMetadata)` at the end of the file to register it"
    ],
    "schema_version": 1,
    "registry": "Update SCHEMA_VERSIONS in registry.py to include `'log': 1`",
    "success_criteria": [
      "Schema is defined, validated, and registered successfully",
      "Appears in `get_available_node_types()` result",
      "Log blocks using this schema can be created and pass validation"
    ]
  }
  