{
  "type": "Task",
  "status": "todo",
  "project": "../project-CogniMemorySystem-POC.json",
  "name": "Implement Generic LinkManager Core Functionality",
  "phase": "Link‑First Graph Layer",
  "description": "Create a scalable, generic LinkManager for the `block_links` table and a thin domain helper for ExecutableMetadata blocks (task / project / epic / bug). The manager must enforce referential‑integrity, prevent cycles, expose fast graph queries, and provide core link operations. A mix‑in helper (`pm_executable_links.py`) should add ergonomic APIs such as `add_blocker`, `get_blockers`, `ready_tasks`, etc., without duplicating storage logic.",
  "implementation_details": {
    "target_files": [
      "infra_core/memory_system/link_manager.py",
      "infra_core/memory_system/pm_executable_links.py",
      "infra_core/memory_system/tests/test_link_manager.py",
      "infra_core/memory_system/tests/test_executable_links.py",
      "infra_core/memory_system/tests/test_link_query.py",
      "experiments/src/memory_system/migrate_legacy_links.py",
      "infra_core/memory_system/tools/agent_facing/add_validation_report_tool.py",
      "infra_core/memory_system/events/link_events.py",
      "infra_core/api/v1/links/__init__.py"
    ],
    "action_items": [
      "[ ] Design LinkManager core interface with essential operations (create_link, delete_link, links_from, links_to, has_cycle, topo_sort, bulk_upsert)",
      "[ ] Create LinkError enum with error types (VALIDATION_ERROR, CYCLE_DETECTED, CONCURRENCY_CONFLICT, ORPHAN_BLOCK)",
      "[ ] Implement validation for links: UUID format, RelationType membership, block existence, single‑parent rule",
      "[ ] Design and implement LinkIndex with in_degree tracking as a critical component for performance optimization",
      "[ ] Add delete_links_for_block method to handle block deletion and prevent orphaned links",
      "[ ] Implement transaction handling for atomic link creation and cycle checks",
      "[ ] Standardize on blocked_by as the canonical dependency relation and update relevant code",
      "[ ] Ensure LinkManager correctly uses the composite primary key (from_id, to_id, relation) for the block_links table",
      "[ ] Define a simple LinkEvent class for tracking link changes",
      "[ ] Create a fluent LinkQuery builder for flexible link querying",
      "[ ] Add comprehensive unit tests for LinkQuery builder covering all filter combinations (relation + depth + direction)",
      "[ ] Write pm_executable_links.py with core helpers: add_blocker, get_blockers, ready_tasks, set_parent, get_children",
      "[ ] Implement update_parent_reference method to sync x_parent_block_id in BaseMetadata with 'child_of' relationships",
      "[ ] Update AddValidationReportTool to clear blockers via LinkManager when a task goes to 'done'",
      "[ ] Create generate_fake_links.py utility for test data generation",
      "[ ] Build migration script migrate_legacy_links.py that reads MemoryBlock.links JSON and bulk_upserts via LinkManager",
      "[ ] Unit tests: happy paths, duplicate link upsert, referential errors, cycle prevention, topo_sort order",
      "[ ] Cross-validate cycle detection implementation with networkx.simple_cycles in tests",
      "[ ] Integration test: task A →blocked_by→ B  ➜ mark B done ➜ ensure A no longer blocked",
      "[ ] Performance benchmark: verify ready_tasks runs in <25ms with 10k tasks & 50k links",
      "[ ] Integration test with concurrent writers to verify no post-commit cycles",
      "[ ] Create ER diagram for docs/memory_block_schema.md showing blocks ↔ links ↔ metadata relationships",
      "[ ] Add API versioning strategy with backward compatibility for LinkQuery endpoints (/api/v1/links/query)",
      "[ ] Document LinkError codes in OpenAPI schema to support error handling by clients",
      "[ ] Update API documentation for LinkManager and LinkQuery endpoints",
      "[ ] Update docs/memory_block_schema.md with LinkManager responsibilities & mix‑in example",
      "[ ] Create a v0.1.0 release tag when all success criteria are met"
    ],
    "implementation_plan": [
      "1. Create LinkError enum and interfaces for LinkManager and LinkQuery",
      "2. Implement core validation and link operations (create, delete, query)",
      "3. Design and implement LinkIndex with in_degree tracking (critical for performance)",
      "4. Add referential integrity check and transaction handling",
      "5. Standardize on blocked_by as the canonical dependency relation",
      "6. Create LinkQuery builder and LinkEvent class",
      "7. Implement pm_executable_links helper layer",
      "8. Update AddValidationReportTool to use LinkManager",
      "9. Create test data generation utility",
      "10. Write migration script and run on staging Dolt branch",
      "11. Implement x_parent_block_id synchronization",
      "12. Add comprehensive tests including performance benchmarks",
      "13. Create documentation with ER diagram and API specs",
      "14. Document API versioning strategy and LinkError codes in OpenAPI",
      "15. Review and finalize for v0.1.0 release"
    ]
  },
  "success_criteria": [
    "[ ] LinkManager passes all unit tests and enforces composite PK uniqueness",
    "[ ] LinkManager properly handles validation and returns appropriate LinkError types",
    "[ ] Cycle detection prevents creating A→B→A blocked_by chains",
    "[ ] Memory block deletion also deletes associated links or prevents deletion if not possible",
    "[ ] pm_executable_links.ready_tasks returns only tasks with zero blockers",
    "[ ] Migration script moves 100% of legacy MemoryBlock.links rows into block_links with no data loss",
    "[ ] AddValidationReportTool successfully removes blockers and unblocks dependents in tests",
    "[ ] x_parent_block_id is correctly synced based on 'child_of' relationships in block_links",
    "[ ] Queries using the new link structure return expected results",
    "[ ] BlockLink uses blocked_by as the canonical dependency relation consistently across the codebase",
    "[ ] Concurrent create_link calls cannot introduce post-commit cycles (integration test with simultaneous writers)",
    "[ ] ready_tasks runs in <25 ms with 10k tasks & 50k links (benchmark in tests)",
    "[ ] LinkQuery unit tests verify all filter combinations work correctly",
    "[ ] LinkQuery builder API provides flexible querying capabilities with clean interface",
    "[ ] API endpoints include versioning strategy with documented backward compatibility",
    "[ ] LinkError codes are documented in OpenAPI schema for client error handling",
    "[ ] Documentation includes ER diagram and API specifications",
    "[ ] /schemas API unchanged (no regressions); existing agents continue to work",
    "[ ] All changes are committed and tagged as v0.1.0 release"
  ],
  "current_status": "Task created based on functionality moved from project management schemas task. The LinkManager will centralize all link-related functionality for working with block_links, enforcing data integrity, and enabling efficient graph traversal for project management relationships."
}