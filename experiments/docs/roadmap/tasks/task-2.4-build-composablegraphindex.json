{
  "type": "Task",
  "status": "in-progress",
  "project": "CogniMemorySystem-POC",
  "name": "Build Composable Graph Index",
  "description": "Set up and integrate a LlamaIndex graph store (e.g., KnowledgeGraphIndex, SimpleGraphStore) alongside the vector store within the LlamaMemory class to store and manage block relationships.",
  "implementation_details": {
    "target_file": "experiments/src/memory_system/llama_memory.py",
    "test_file": "experiments/src/memory_system/tests/test_llama_memory.py"
  },
  "action_items": [
    "[/] Research & Decide: Choose the most suitable LlamaIndex graph mechanism (Implicitly chose SimpleGraphStore based on code).",
    "[/] Modify `LlamaMemory.__init__`: Initialize the chosen graph index/store. Ensure it shares the same `StorageContext` or underlying stores (like ChromaDB) if appropriate, or configure its persistence. (Implemented in code).",
    "[/] Modify Indexing Method(s) (e.g., `add_nodes` or `_index_nodes`): (Implemented in `add_block` and `update_block`).",
    "[/]   Ensure that nodes created by `memory_block_to_node` (now including relationships from Task 2.3) are explicitly added to *both* the vector index and the graph index/store. (Implemented in code using `upsert_triplet`).",
    "[/]   Verify if the chosen graph store automatically infers relationships from `TextNode.relationships` or if explicit relationship insertion APIs need to be called (e.g., `graph_store.add_triplets`). (Confirmed explicit call needed and implemented).",
    "[ ] (TDD) Add integration tests to `test_llama_memory.py`. (Existing tests pass but don't cover graph specifics).",
    "[ ] (TDD) Write test: Create multiple `MemoryBlock` objects with links between them (e.g., A->B, A->C).",
    "[ ] (TDD) Convert them to nodes using the updated converter.",
    "[ ] (TDD) Index these nodes using the `LlamaMemory` indexing method.",
    "[ ] (TDD) Assert that querying the vector store still works for these nodes.",
    "[ ] (TDD) Query the graph store/index directly (if API allows) or retrieve nodes via vector search and inspect their `relationships` attribute to confirm the A->B and A->C links were persisted in the graph structure."
  ],
  "test_criteria": [
    "[ ] Integration tests pass in `test_llama_memory.py`. (Requires adding graph-specific tests).",
    "[ ] Test confirms that indexing multiple linked `MemoryBlock` objects results in updates to *both* the vector index and the graph store/index within `LlamaMemory`.",
    "[ ] Test successfully retrieves a node and inspects its `relationships` (or queries the graph store directly) to confirm the expected graph structure reflects the indexed links.",
    "[ ] Test verifies indexing a block that links to a non-existent ID handles the situation gracefully (e.g., doesn't crash, potentially logs a warning)."
  ],
  "success_criteria": [
    "[/] The `LlamaMemory` system initializes and manages both a vector store and a graph store/index. (Implemented in code).",
    "[/] The indexing process correctly populates both stores with node data and relationship information derived from `MemoryBlocks`. (Implemented in code, needs graph-specific testing).",
    "[ ] Integration tests demonstrate that linked blocks are structurally represented within the graph component. (Needs graph-specific tests)."
  ],
  "current_status": "Initial implementation of SimpleGraphStore integration is complete. Existing tests in `test_llama_memory.py` pass, confirming basic vector store functionality works. However, these tests do not currently verify the graph store integration (e.g., checking if relationships are stored correctly). Next step is to add specific tests for graph functionality as outlined in the TDD action items."
} 