{
  "type": "Task",
  "status": "todo",
  "project": "../project-CogniMemorySystem-POC.json",
  "name": "Implement CogniStructuredMemoryAdapter",
  "description": "Create a LangChain BaseMemory adapter that wraps StructuredMemoryBank, allowing LangChain agents to interact with persistent structured memory.",
  "phase": "⚙️ Phase 3: Agent + Tool Wiring (Structured Memory)",
  "implementation_details": {
    "target_file": "experiments/src/memory_system/langchain_adapter.py",
    "test_file": "experiments/src/memory_system/tests/test_langchain_adapter.py",
    "wraps": "StructuredMemoryBank (from Task 3.1)",
    "inherits_from": "langchain_core.memory.BaseMemory"
  },
  "action_items": [
    "[ ] Import `BaseMemory` from `langchain_core.memory`.",
    "[ ] Import `StructuredMemoryBank`.",
    "[ ] Define the `CogniStructuredMemoryAdapter` class inheriting from `BaseMemory`.",
    "[ ] Implement `__init__` to accept a `StructuredMemoryBank` instance.",
    "[ ] Define `memory_variables` property (e.g., return `['relevant_blocks']` or similar).",
    "[ ] Implement `load_memory_variables(inputs: Dict[str, Any]) -> Dict[str, Any]`:",
    "[ ]   Extract the main input key (e.g., `inputs['input']`).",
    "[ ]   Use the wrapped `StructuredMemoryBank.query_semantic()` with the input text.",
    "[ ]   Format the retrieved `MemoryBlock` list (e.g., as a formatted string or list of dicts) under the key defined in `memory_variables`.",
    "[ ]   Return the dictionary (e.g., `{'relevant_blocks': formatted_blocks}`).",
    "[ ] Implement `save_context(inputs: Dict[str, Any], outputs: Dict[str, str]) -> None`:",
    "[ ]   Decide on a strategy for creating a block (e.g., combine input and output, use a specific template).",
    "[ ]   Construct the `text` for a new `MemoryBlock`.",
    "[ ]   Define `type` (e.g., 'interaction', 'knowledge').",
    "[ ]   Generate relevant `tags` (e.g., `agent:<agent_name>`, `session:<session_id>`, maybe extract keywords from input/output).",
    "[ ]   Instantiate a `MemoryBlock` object (ID, timestamps etc. will be handled by `create_memory_block`).",
    "[ ]   Call the wrapped `StructuredMemoryBank.create_memory_block()`.",
    "[ ] Implement `clear()` method:",
    "[ ]   Decide on clearing strategy (e.g., delete blocks with a specific session tag? No-op? Needs clarification based on use case). For now, maybe just log a message or raise `NotImplementedError`."
  ],
  "test_criteria": [
    "[ ] See `task-3.7-test-cogni-structured-memory-adapter.json`."
  ],
  "success_criteria": [
    "[ ] A class conforming to LangChain's `BaseMemory` interface exists.",
    "[ ] The adapter successfully uses `StructuredMemoryBank` for semantic retrieval in `load_memory_variables`.",
    "[ ] The adapter successfully uses `StructuredMemoryBank` to create new blocks in `save_context`.",
    "[ ] The adapter can be instantiated and used within a LangChain agent/chain."
  ],
  "current_status": "Task definition created."
} 