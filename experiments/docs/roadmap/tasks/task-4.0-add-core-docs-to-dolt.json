{
  "type": "Task",
  "status": "in-progress",
  "project": "../project-CogniMemorySystem-POC.json",
  "id": "4.0",
  "name": "Add Core Project Documents to Dolt Memory System",
  "description": "Ingest core project documents (Charter, Manifesto, License, Core Cogni Spirit) into the Dolt-backed StructuredMemoryBank as 'doc' type MemoryBlocks, utilizing the specialized CreateDocMemoryBlockTool and QueryDocMemoryBlockTool.",
  "validation_output": "INFO:root:Processing block to add (ID: 969a4d31-cfd0-4a72-8b7c-0a19bbd44627).\nINFO:httpx:HTTP Request: POST https://api.openai.com/v1/embeddings \"HTTP/1.1 200 OK\"\nINFO:root:Successfully inserted node for block ID: 969a4d31-cfd0-4a72-8b7c-0a19bbd44627\nINFO:root:Processing block to add (ID: f7c23daa-1773-403b-905b-aea9f6f92bc9).\nINFO:httpx:HTTP Request: POST https://api.openai.com/v1/embeddings \"HTTP/1.1 200 OK\"\nINFO:root:Successfully inserted node for block ID: f7c23daa-1773-403b-905b-aea9f6f92bc9\nINFO:__main__:Successfully indexed 4 MemoryBlocks. Ready for querying.\nINFO:__main__:Enter your query. Type 'exit' or 'quit' to stop.\nQuery> what is cogniDAOs purpose?\nINFO:__main__:Querying for: 'what is cogniDAOs purpose?'\nINFO:root:Performing vector store query: \"what is cogniDAOs purpose?\" (top_k=3)\nINFO:httpx:HTTP Request: POST https://api.openai.com/v1/embeddings \"HTTP/1.1 200 OK\"\nINFO:root:Query successful. Retrieved 3 nodes.\nINFO:root:  Result 1: Node ID f7c23daa-1773-403b-905b-aea9f6f92bc9, Score: 0.7120082995789756\nINFO:root:  Result 2: Node ID 35288c7f-70d0-4609-a9fb-b34f90252cb0, Score: 0.6780642057069408\nINFO:root:  Result 3: Node ID 80ee4938-7b3f-4627-9b2e-c7c5b3998191, Score: 0.6470428686571903\nINFO:__main__:Found 3 results:\n--- Result 1 (Score: 0.7120) ---\n  Title: N/A\n  Source File: /Users/derek/dev/cogni/MANIFESTO.md\n  Block ID: f7c23daa-1773-403b-905b-aea9f6f92bc9\n  Snippet: Title: Cogni Project Manifesto Type: doc Tags: core-document, manifesto, philosophy, foundational --- # CogniDAO Manifesto   *For the Intelligence Commons*   *By Humans and AI — Together*  ---  ## 1. The Problem  The tools to organize people are brok...\n------------------------------------\n--- Result 2 (Score: 0.6781) ---\n  Title: N/A\n  Source File: /Users/derek/dev/cogni/CHARTER.md\n  Block ID: 35288c7f-70d0-4609-a9fb-b34f90252cb0\n  Snippet: Title: Cogni Project Charter Type: doc Tags: core-document, charter, governance, foundational --- # CogniDAO Charter   *Version 0.1 — Living Document*  ---  ## One Word   **Empowerment**  ---  ## One Sentence   An AI-governed, open-core DAO that empo...\n------------------------------------\n--- Result 3 (Score: 0.6470) ---\n  Title: N/A\n  Source File: /Users/derek/dev/cogni/data/memory_banks/core/main/guide_cogni-core-spirit.md\n  Block ID: 80ee4938-7b3f-4627-9b2e-c7c5b3998191\n  Snippet: Title: Cogni Core Spirit Guide Type: doc Tags: core-document, philosophy, guidance, foundational --- # Core Spirit Act wisely....\n",
  "action_items": [
    "[x] Implement `CreateDocMemoryBlockTool` (infra_core/memory_system/tools/agent_facing/create_doc_memory_block_tool.py) as a wrapper for `create_memory_block`.",
    "[x] Implement `QueryDocMemoryBlockTool` (infra_core/memory_system/tools/agent_facing/query_doc_memory_block_tool.py) as a wrapper for `query_memory_blocks_core`.",
    "[x] Write and pass unit tests for `CreateDocMemoryBlockTool` (infra_core/memory_system/tools/tests/agent_facing/test_create_doc_memory_block_tool.py).",
    "[x] Write and pass unit tests for `QueryDocMemoryBlockTool` (infra_core/memory_system/tools/tests/agent_facing/test_query_doc_memory_block_tool.py).",
    "[x] Confirm canonical source file paths for: CHARTER.md, MANIFESTO.md, LICENSE.md, and guide_cogni-core-spirit.md.",
    "[x] Read the content of each identified source document.",
    "[x] For each document, prepare the necessary data for ingestion using `CreateDocMemoryBlockInput`:\\n    - title: <Document Title>\\n    - content: <full document content>\\n    - source_file: <relative_path_to_source>\\n    - doc_version: \"1.0\"\\n    - doc_format: \"markdown\"\\n    - tags: [\"core-document\", \"<specific_tag e.g., legal, philosophy>\"]\\n    - (Consider other relevant `DocMetadata` fields: audience, section, last_reviewed, completed)",
    "[x] Develop or utilize an existing script/method to call the `CreateDocMemoryBlockTool` to ingest each document (`scripts/ingest_core_documents.py` created and adapted).",
    "[/] Ensure each new MemoryBlock creation results in a successful commit to the Dolt database (currently supports --no-commit, full commit part pending final validation).",
    "[/] Verify that each document, once ingested, is retrievable from the memory system using `QueryDocMemoryBlockTool` (partially validated with `scripts/query_dolt_working_set.py`)."
  ],
  "test_criteria": [
    "Unit tests for `CreateDocMemoryBlockTool` and `QueryDocMemoryBlockTool` pass successfully.",
    "MemoryBlocks for Charter, Manifesto, License, and Core Cogni Spirit exist in the database with type='doc'.",
    "The 'text' field of each MemoryBlock accurately reflects the content of its source document.",
    "Populated metadata (via `CreateDocMemoryBlockTool`) for each block includes at least 'title', 'source_file', 'doc_version', 'doc_format', and relevant 'tags'.",
    "Dolt log confirms new commits corresponding to the addition of these four documents.",
    "Each document can be successfully queried and retrieved from the StructuredMemoryBank using `QueryDocMemoryBlockTool`."
  ],
  "dependencies": [
    "task-3.1-structuredmemorybank.json",
    "task-3.5-creatememoryblock-tool.json",
    "task-3.4-querymemoryblocks-tool.json"
  ],
  "success_criteria": {
    "functionality": [
      "Core project documents are durably stored in Dolt via the StructuredMemoryBank using the new agent-facing tools.",
      "Documents are accessible for query and retrieval through the memory system's interfaces, specifically `QueryDocMemoryBlockTool`."
    ],
    "data_integrity": [
      "Document content is preserved accurately in the 'text' field of MemoryBlocks.",
      "Key metadata is correctly associated with each document's MemoryBlock as defined by `DocMetadata` and `CreateDocMemoryBlockInput`."
    ],
    "code_quality": [
      "Agent-facing tools `CreateDocMemoryBlockTool` and `QueryDocMemoryBlockTool` are implemented with unit tests achieving sufficient coverage."
    ]
  },
  "notes": "Follow the recommendation to use the existing 'doc' MemoryBlock type. Prioritize using root-level .md files (CHARTER.md, MANIFESTO.md, LICENSE.md) and 'data/memory_banks/core/main/guide_cogni-core-spirit.md' as sources. The ingestion process should leverage the newly created `CreateDocMemoryBlockTool`.\n\nKey Files Created:\n- infra_core/memory_system/tools/agent_facing/create_doc_memory_block_tool.py\n- infra_core/memory_system/tools/agent_facing/query_doc_memory_block_tool.py\n- infra_core/memory_system/tools/tests/agent_facing/test_create_doc_memory_block_tool.py\n- infra_core/memory_system/tools/tests/agent_facing/test_query_doc_memory_block_tool.py"
}