{
    "type": "Task",
    "status": "todo",
    "project": "../project-CogniMemorySystem-POC.json",
    "name": "Update Metadata Schemas and Block Links Support for Epics, Projects, Tasks, and Bugs",
    "description": "Implement updated metadata schemas and enhanced block links support following the new design that centralizes relationship information in BlockLinks. This includes adding support for Epics, updating Project and Task metadata models, and supporting Bug tracking.",
    "phase": "Schema Enhancement",
    "implementation_details": {
        "target_files": [
            "infra_core/memory_system/schemas/memory_block.py",
            "infra_core/memory_system/schemas/common.py",
            "infra_core/memory_system/schemas/metadata/epic.py",
            "infra_core/memory_system/schemas/metadata/project.py",
            "infra_core/memory_system/schemas/metadata/task.py",
            "infra_core/memory_system/schemas/metadata/bug.py",
            "infra_core/memory_system/schemas/registry.py",
            "infra_core/memory_system/schemas/__init__.py",
            "experiments/src/memory_system/link_manager.py"
        ],
        "action_items": [
            "[ ] Add 'epic' and 'bug' to MemoryBlock.type enum in memory_block.py",
            "[ ] Update RelationType enum in common.py to include 'parent_of' and 'belongs_to_epic'",
            "[ ] Create EpicMetadata Pydantic model in metadata/epic.py",
            "[ ] Create BugMetadata Pydantic model in metadata/bug.py",
            "[ ] Update ProjectMetadata model to align with new specification",
            "[ ] Update TaskMetadata model to align with new specification",
            "[ ] Increment schema versions in registry.py for all affected models (project, task, epic, bug)",
            "[ ] Update __init__.py to export new metadata models",
            "[ ] Verify block_links table schema compatibility with updated BlockLink model",
            "[ ] Create LinkManager class in link_manager.py with methods for creating, deleting, and querying links",
            "[ ] Create data transfer script to populate block_links table from existing MemoryBlock.links data",
            "[ ] Update x_parent_block_id in BaseMetadata based on BlockLinks with 'child_of' relation",
            "[ ] Generate and publish updated JSON schemas to schemas/backend/ directory (automatic via pre-commit)",
            "[ ] Test the /schemas API endpoint to validate schema updates are accessible"
        ],
        "implementation_plan": [
            "1. Schema Updates: First implement all schema changes to memory_block, common, and metadata models",
            "2. Link Manager: Create LinkManager class with link manipulation methods",
            "3. Data Transfer: Write and test script to transfer existing links to block_links table",
            "4. Testing: Comprehensive tests for new models and link functionality",
            "5. API Validation: Test schema API endpoints to ensure proper schema availability",
            "6. Documentation: Update architecture docs to explain link-first approach"
        ],
        "implementation_sequence": [
            "Start with the schema changes, as downstream components depend on them",
            "Create new EpicMetadata and BugMetadata models first, then update existing models",
            "Use test-driven development for LinkManager and database interactions",
            "Run schema verification steps to ensure compatibility",
            "Validate consistency with LlamaIndex and other dependent systems"
        ],
        "model_drafts": {
            "MemoryBlock Type Enum": "Literal['knowledge', 'task', 'project', 'doc', 'interaction', 'log', 'epic', 'bug']",
            "RelationType Enum": "Literal['related_to', 'subtask_of', 'depends_on', 'child_of', 'mentions', 'parent_of', 'belongs_to_epic']",
            "EpicMetadata": {
                "status": "Literal['idea', 'planning', 'in_progress', 'at_risk', 'done']",
                "owner": "str",
                "name": "str",
                "description": "str",
                "start_date": "Optional[datetime]",
                "target_date": "Optional[datetime]",
                "priority": "Optional[Literal['P0', 'P1', 'P2', 'P3']]",
                "progress_percent": "Optional[float]",
                "tags": "List[str]",
                "completed": "bool"
            },
            "Updated ProjectMetadata": {
                "status": "Literal['backlog', 'in_progress', 'blocked', 'done']",
                "owner": "str",
                "name": "str",
                "description": "str",
                "priority": "Optional[Literal['P0', 'P1', 'P2', 'P3']]",
                "start_date": "Optional[datetime]",
                "target_date": "Optional[datetime]",
                "progress_percent": "Optional[float]",
                "tags": "List[str]",
                "confidence_score": "Optional[ConfidenceScore]"
            },
            "Updated TaskMetadata": {
                "status": "Literal['todo', 'in_progress', 'review', 'blocked', 'done']",
                "assignee": "Optional[str]",
                "title": "str",
                "description": "str",
                "priority": "Optional[Literal['P0', 'P1', 'P2', 'P3']]",
                "story_points": "Optional[float]",
                "estimate_hours": "Optional[float]",
                "start_date": "Optional[datetime]",
                "due_date": "Optional[datetime]",
                "labels": "List[str]",
                "confidence_score": "Optional[ConfidenceScore]"
            },
            "BugMetadata": {
                "status": "Literal['open', 'in_progress', 'resolved', 'closed']",
                "reporter": "str",
                "assignee": "Optional[str]",
                "title": "str",
                "description": "str",
                "priority": "Optional[Literal['P0', 'P1', 'P2', 'P3']]",
                "severity": "Optional[Literal['critical', 'high', 'medium', 'low']]",
                "version_found": "Optional[str]",
                "version_fixed": "Optional[str]",
                "steps_to_reproduce": "Optional[str]",
                "due_date": "Optional[datetime]",
                "labels": "List[str]",
                "confidence_score": "Optional[ConfidenceScore]"
            },
            "existing_block_links_table_schema": "CREATE TABLE IF NOT EXISTS block_links (\n  from_id VARCHAR(255) NOT NULL,\n  to_id VARCHAR(255) NOT NULL,\n  relation VARCHAR(50) NOT NULL,\n  priority INT NULL DEFAULT 0,\n  link_metadata JSON NULL,\n  created_by VARCHAR(255) NULL,\n  created_at DATETIME NOT NULL,\n  PRIMARY KEY (from_id, to_id, relation)\n);\n\nCREATE INDEX idx_block_links_to_id ON block_links (to_id);"
        }
    },
    "success_criteria": [
        "[ ] All new and updated Pydantic models pass validation tests",
        "[ ] Schema JSONs are properly generated for all models",
        "[ ] All block types adhere to the link-first relationship approach",
        "[ ] Memory block structure properly supports the following block types and relationships:",
        {
            "Memory Block Structure": [
                "Supports 'epic', 'project', 'task', and 'bug' block types",
                "Uses BlockLink as the source of truth for relationships",
                "Maintains backward compatibility with existing blocks",
                "No duplicate references (e.g., don't store references in both links and metadata)"
            ]
        },
        {
            "Block Links Design": [
                "RelationType enum includes all required relationship types",
                "BlockLink model properly captures relationship details",
                "Link metadata supports additional relationship attributes as needed"
            ]
        },
        {
            "Dolt block_links Table": [
                "No schema changes needed - existing table structure is compatible",
                "LinkManager correctly uses the composite primary key (from_id, to_id, relation)",
                "New relation types work with existing table structure",
                "Uses existing indexes for efficient graph traversal queries"
            ]
        },
        {
            "Schema Registry": [
                "Updated schema versions in SCHEMA_VERSIONS dictionary",
                "JSON schemas properly registered in node_schemas table (via pre-commit hook)",
                "/schemas API endpoint returns correct schema information",
                "Generated JSON schemas match the Pydantic models"
            ]
        },
        {
            "LinkManager Implementation": [
                "Provides methods for creating and deleting links",
                "Maintains consistency between BlockLink objects and block_links table",
                "Ensures x_parent_block_id is properly synchronized with 'child_of' relationships",
                "Prevents circular dependencies and other invalid relationships"
            ]
        },
        {
            "Epic Metadata": [
                "Captures status (idea, planning, in_progress, at_risk, done)",
                "Includes owner, name, description fields",
                "Supports dates (start_date, target_date)",
                "Tracks priority and progress",
                "Contains tags and completion status"
            ]
        },
        {
            "Project Metadata": [
                "Captures status (backlog, in_progress, blocked, done)",
                "Includes owner, name, description fields",
                "Tracks priority, dates, and progress",
                "Contains tags and confidence scores",
                "No longer contains redundant reference fields"
            ]
        },
        {
            "Task Metadata": [
                "Captures status (todo, in_progress, review, blocked, done)",
                "Includes assignee, title, description fields",
                "Tracks priority, estimates, and dates",
                "Contains labels and confidence scores",
                "No longer contains redundant reference fields"
            ]
        },
        {
            "Bug Metadata": [
                "Captures status (open, in_progress, resolved, closed)",
                "Includes reporter, assignee, title, description fields",
                "Tracks priority, severity, and dates",
                "Contains version information and steps to reproduce"
            ]
        },
        {
            "Data Transfer Success": [
                "All existing links in MemoryBlock.links are correctly transferred to block_links table",
                "x_parent_block_id is correctly set based on 'child_of' relationships",
                "No data loss during transfer",
                "Queries using the new link structure return expected results"
            ]
        }
    ],
    "current_status": "Task definition created, pending implementation. This task implements the link-first relationship approach where BlockLink is the source of truth for relationships between blocks, and metadata focuses on type-specific business data rather than graph plumbing."
}