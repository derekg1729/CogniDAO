{
  "type": "Project",
  "status": "planning",
  "epic": "[[Epic_Presence_and_Control_Loops]]",
  "name": "MemoryRecoverabilityGuarantee",
  "description": "Build a foundational layer to ensure that any CogniMemory block can be retroactively recovered, validated, and used for agent/DAO forking. Focus on reconstructing ancestry chains, computing ancestry hashes, handling degraded forks, and optionally summarizing lost data.",
  "implementation_flow": [
    "task-1.1-reconstruct-ancestry-chain",
    "task-1.2-detect-missing-ancestor-blocks",
    "task-1.3-compute-ancestry-hash",
    "task-1.4-mark-memoryblock-with-recovery-status",
    "task-1.5-check-forkability-of-block",
    "task-1.6-summary-fallback-if-unrecoverable",
    "task-1.7-test-memory-reconstruction-and-divergence"
  ],
  "planning_details": {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "title": "MemoryRecoverabilityDesign",
    "id": "memory_recoverability_design_001",
    "block_type_used": "project",
    "tags": [
      "memory_integrity",
      "ancestry_hash",
      "dolt",
      "llamaindex",
      "forking",
      "agent_rollback"
    ],
    "metadata": {
      "core_goal": "Ensure agents and DAOs can fork from any previously recorded state without risk of silent memory corruption or loss.",
      "why_it_matters": "Without guaranteed recoverability, state-time forking is unreliable â€” agents or DAOs might unknowingly diverge from tampered or incomplete memory.",
      "primary_storage": "Dolt versioned SQL store with block-level links",
      "recovery_validation_method": "Deterministic ancestry traversal + ancestry hash + fork status tag",
      "fallback_strategy": "Optional summarization from LlamaIndex if full ancestry chain is not recoverable",
      "block_changes": {
        "metadata_extensions": [
          "forked_from",
          "ancestry_hash",
          "recovery_status"
        ],
        "status_enum": [
          "recoverable",
          "degraded",
          "unforkable"
        ]
      }
    },
    "links": [
      {
        "to_id": "CogniMemorySystem-POC",
        "relation": "implements"
      }
    ],
    "source_file": "docs/memory-recoverability.md",
    "source_uri": null,
    "confidence": {
      "human": 1.0,
      "ai": 1.0
    },
    "created_by": "cogni",
    "created_at": "2025-04-25T04:00:00Z",
    "updated_at": null
  },
  "success_criteria": [
    "Demonstrate that any MemoryBlock ID can be used to fully reconstruct its ancestry chain or clearly detect failures.",
    "Ensure all forkable memory blocks include a verified ancestry hash and `forked_from` metadata if branched.",
    "Implement graceful degradation and optional summarization when full context cannot be restored.",
    "Validate that different forks from the same origin diverge correctly and transparently."
  ]
}
